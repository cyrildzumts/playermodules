/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -a Notify_Adaptor org.freedesktop.Notifications.xml
 *
 * qdbusxml2cpp is Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "Notify_Adaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class NotificationsAdaptor
 */

NotificationsAdaptor::NotificationsAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

NotificationsAdaptor::~NotificationsAdaptor()
{
    // destructor
}

void NotificationsAdaptor::CloseNotification(uint id)
{
    // handle method call org.freedesktop.Notifications.CloseNotification
    QMetaObject::invokeMethod(parent(), "CloseNotification", Q_ARG(uint, id));
}

QStringList NotificationsAdaptor::GetCapabilities()
{
    // handle method call org.freedesktop.Notifications.GetCapabilities
    QStringList return_caps;
    QMetaObject::invokeMethod(parent(), "GetCapabilities", Q_RETURN_ARG(QStringList, return_caps));
    return return_caps;
}

//QString NotificationsAdaptor::GetServerInformation(QString &return_vendor, QString &return_version, QString &return_spec_version)
//{
//    // handle method call org.freedesktop.Notifications.GetServerInformation
//    //return static_cast<YourObjectType *>(parent())->GetServerInformation(return_vendor, return_version, return_spec_version);
//}

uint NotificationsAdaptor::Notify(const QString &app_name, uint id, const QString &icon, const QString &summary, const QString &body, const QStringList &actions, const QVariantMap &hints, int timeout)
{
    // handle method call org.freedesktop.Notifications.Notify
    uint return_id;
    QMetaObject::invokeMethod(parent(), "Notify", Q_RETURN_ARG(uint, return_id), Q_ARG(QString, app_name), Q_ARG(uint, id), Q_ARG(QString, icon), Q_ARG(QString, summary), Q_ARG(QString, body), Q_ARG(QStringList, actions), Q_ARG(QVariantMap, hints), Q_ARG(int, timeout));
    return return_id;
}

